name: Build and Release

on:
  push:
    branches: [ main ]
  pull_request:
  workflow_dispatch:
    inputs:
      tag:
        description: 'Release tag (for example v1.0.0)'
        required: false

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x
      - run: dotnet restore
      - run: dotnet build --configuration Release --no-restore
      - run: dotnet test --no-build --configuration Release

  publish:
    if: github.event_name != 'pull_request'
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Update VERSION
        run: |
          VERSION="${{ github.event.inputs.tag || github.ref_name }}"
          VERSION="${VERSION#refs/tags/}"
          VERSION="${VERSION#v}"

          echo "Updating VERSION to $VERSION"
          echo "$VERSION" > VERSION

          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"

          if git diff --quiet VERSION; then
            echo "VERSION file unchanged, skipping commit"
          else
            git add VERSION
            echo "Committing VERSION update to $VERSION"
            if git commit -m "chore: bump version to $VERSION"; then
              echo "Successfully committed version update"
              git pull --rebase origin main
              if git push origin HEAD:main; then
                echo "Successfully pushed version update"
              else
                echo "Failed to push version update" >&2
                exit 1
              fi
            else
              echo "Failed to commit version update" >&2
              exit 1
            fi
          fi
      - uses: actions/setup-dotnet@v4
        if: github.event_name != 'pull_request'
        with:
          dotnet-version: 8.0.x
      - name: Publish Windows build
        if: github.event_name != 'pull_request'
        run: dotnet publish DB2ERD/DB2ERD.csproj -c Release -r win-x64 --self-contained true -p:PublishSingleFile=true -o publish/win-x64
      - name: Publish Linux build
        if: github.event_name != 'pull_request'
        run: dotnet publish DB2ERD/DB2ERD.csproj -c Release -r linux-x64 --self-contained true -p:PublishSingleFile=true -o publish/linux-x64
      - name: List generated artifacts
        if: github.event_name != 'pull_request'
        run: ls -R publish
      - name: Create tag when run manually
        if: github.event_name == 'workflow_dispatch' && github.event.inputs.tag != ''
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git tag ${{ github.event.inputs.tag }}
          git push origin ${{ github.event.inputs.tag }}
      - name: Upload artifacts
        if: github.event_name != 'pull_request'
        uses: actions/upload-artifact@v4
        with:
          name: windows
          path: publish/win-x64
      - uses: actions/upload-artifact@v4
        if: github.event_name != 'pull_request'
        with:
          name: linux
          path: publish/linux-x64
      - name: Create GitHub Release
        if: github.event_name != 'pull_request'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.event.inputs.tag || github.ref_name }}
          files: |
            publish/win-x64/**
            publish/linux-x64/**

